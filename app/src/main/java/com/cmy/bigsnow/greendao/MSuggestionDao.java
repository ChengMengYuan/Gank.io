package com.cmy.bigsnow.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cmy.bigsnow.app.search.adapter.MSuggestion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSUGGESTION".
*/
public class MSuggestionDao extends AbstractDao<MSuggestion, Void> {

    public static final String TABLENAME = "MSUGGESTION";

    /**
     * Properties of entity MSuggestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Suggestion = new Property(0, String.class, "suggestion", false, "SUGGESTION");
        public final static Property MIsHistory = new Property(1, boolean.class, "mIsHistory", false, "M_IS_HISTORY");
    }


    public MSuggestionDao(DaoConfig config) {
        super(config);
    }
    
    public MSuggestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSUGGESTION\" (" + //
                "\"SUGGESTION\" TEXT NOT NULL ," + // 0: suggestion
                "\"M_IS_HISTORY\" INTEGER NOT NULL );"); // 1: mIsHistory
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSUGGESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MSuggestion entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSuggestion());
        stmt.bindLong(2, entity.getMIsHistory() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MSuggestion entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSuggestion());
        stmt.bindLong(2, entity.getMIsHistory() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MSuggestion readEntity(Cursor cursor, int offset) {
        MSuggestion entity = new MSuggestion( //
            cursor.getString(offset + 0), // suggestion
            cursor.getShort(offset + 1) != 0 // mIsHistory
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MSuggestion entity, int offset) {
        entity.setSuggestion(cursor.getString(offset + 0));
        entity.setMIsHistory(cursor.getShort(offset + 1) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MSuggestion entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MSuggestion entity) {
        return null;
    }

    @Override
    public boolean hasKey(MSuggestion entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
